name: Deploy

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  image: us-central1-docker.pkg.dev/rising-sector-360922/budget-artifact-registry/category-assigner

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get changed files in the Python folder
        id: changed-files-python
        uses: tj-actions/changed-files@v37
        with:
          files: python/**
          files_ignore: python/src/.pytest_cache/**

      - name: Get changed files in the Terraform folder
        id: changed-files-terraform
        uses: tj-actions/changed-files@v37
        with:
          files: terraform/*.{tf,tfvars}
          files_ignore: terraform/.terraform/**

      - name: auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: rising-sector-360922

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1

      - name: Login to Artifact Registry
        if: steps.changed-files-python.outputs.any_changed == 'true'
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Debug build context
        run: ls -R

      - name: Docker build and push
        if: steps.changed-files-python.outputs.any_changed == 'true'
        run: |
          docker build -t ${{ env.image }}:${{ github.event.pull_request.head.sha }} -t ${{ env.image }}:latest -f ./python/src/Dockerfile .
          docker push ${{ env.image }}:${{ github.event.pull_request.head.sha }}
          docker push ${{ env.image }}:latest

      - name: Configure Terraform
        if: steps.changed-files-terraform.outputs.any_changed == 'true'
        uses: hashicorp/setup-terraform@v2.0.3

      - name: Terraform Init
        if: success()
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Fmt
        if: success()
        working-directory: ./terraform
        run: terraform fmt -recursive

      - name: Terraform Plan
        id: terraform-plan
        if: github.event_name == 'pull_request' && success()
        working-directory: ./terraform
        run: terraform plan -no-color

      - name: Terraform Apply
        if: github.event_name == 'push' && success()
        working-directory: ./terraform
        run: terraform apply --auto-approve

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && success()
        env:
          PLAN: "terraform\n${{ steps.terraform-plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }